package cn.com.cscec8b.bm.cntrmeasure.model.services;


import cn.com.cscec8b.bm.cntrmeasure.model.object.CntrCheck;
import cn.com.cscec8b.bm.cntrmeasure.model.object.CntrMeasure;
import cn.com.cscec8b.bm.cntrmeasure.model.queries.BmCntrMeasureLineTVORowImpl;
import cn.com.cscec8b.bm.cntrmeasure.model.queries.BmCntrVerifyHeaderTVORowImpl;
import cn.com.cscec8b.bm.cntrmeasure.model.services.common.CntrMeasureAM;
import cn.com.cscec8b.framework.model.common.CustomAppModuleImpl;


import cn.com.cscec8b.framework.model.common.CustomViewObjectImpl;
import cn.com.cscec8b.utils.db.DBUtil;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.text.NumberFormat;

import java.util.ArrayList;
import java.util.List;

import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 19 23:49:56 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CntrMeasureAMImpl extends CustomAppModuleImpl implements CntrMeasureAM {

    private ADFLogger adfLogger;

    /**
     * This is the default constructor (do not remove).
     */
    public CntrMeasureAMImpl() {
    }

    //  private ADFLogger adfLogger;

    /**
     * Container's getter for BmCntrMeasureHeaderT1.
     * @return BmCntrMeasureHeaderT1
     */
    public ViewObjectImpl getBmCntrMeasureHeaderT1() {
        return (ViewObjectImpl)findViewObject("BmCntrMeasureHeaderT1");
    }


    /***
     *
     * 清单项带出子清单方法
     *
     * **/
    public void queryAllCntrListLine(int cntrListId, int headerId) {
        try {
            //删除页面行
            this.removeMeasureLineRows();
            //查询合同清单项
            CustomViewObjectImpl listLineLovVO =
                this.getBmCntrMeasureListLov1();
            listLineLovVO.setRangeSize(-1);
            ViewCriteria vc = listLineLovVO.createViewCriteria();
            ViewCriteriaRow vcr = vc.createViewCriteriaRow();
            vcr.setAttribute("ListId", cntrListId);
            vc.add(vcr);
            listLineLovVO.applyViewCriteria(vc);
            listLineLovVO.executeQuery();


            listLineLovVO.setRangeSize(-1);
            Row[] allRow = listLineLovVO.getAllRowsInRange();
            ViewObjectImpl measureLineVo = this.getBmCntrMeasureLineT1();
            //新增清单项的值
            for (int i = 0; i < allRow.length; ++i) {
                Row row = allRow[i];
                //  print(row);
                Row newRow = measureLineVo.createRow();
                newRow.setNewRowState(Row.STATUS_INITIALIZED);
                measureLineVo.insertRow(newRow);

                newRow.setAttribute("CntrListHeaderId",
                                    row.getAttribute("ListId"));
                newRow.setAttribute("CntrListNumber",
                                    row.getAttribute("CntrListNumber"));
                newRow.setAttribute("CntrListName",
                                    row.getAttribute("CntrListName"));


                newRow.setAttribute("CntrListLineId",
                                    row.getAttribute("CntrListLineId"));

                newRow.setAttribute("LineNum", i + 1 + "");
                newRow.setAttribute("CntrListUomCode",
                                    row.getAttribute("Unit"));
                newRow.setAttribute("BudgetQuantity",
                                    row.getAttribute("BudgetQuantity") ==
                                    null ? new Number(0) :
                                    row.getAttribute("BudgetQuantity"));
                Number cntrPrice = (Number)row.getAttribute("CntrPrice");
                newRow.setAttribute("UnitPrice", cntrPrice);
                newRow.setAttribute("TaskName", row.getAttribute("TaskName"));
                newRow.setAttribute("TaskNumber",
                                    row.getAttribute("TaskNumber"));
                newRow.setAttribute("TaskId", row.getAttribute("TaskId"));
                newRow.setAttribute("CumulativeQuantity",
                                    ((Number)row.getAttribute("CumulativeQuantities")).round(5));

                newRow.setAttribute("EngineeringQuantity", new Number(0));
                Number percentage = new Number(0);
                if (((Number)row.getAttribute("BudgetQuantity")).intValue() !=
                    0) {
                    percentage =
                            (Number)((Number)row.getAttribute("BudgetQuantity")).minus(((Number)row.getAttribute("CumulativeQuantities"))).div(((Number)row.getAttribute("BudgetQuantity")));
                }
                newRow.setAttribute("CompletionPercentage",
                                    new Number(100).minus(percentage.multiply(100)));
                newRow.setAttribute("MeasureAmount", new Number(0));
                newRow.setAttribute("ProductionProAmount", new Number(0));
                //          row.getAttribute("TransferRate"));
                //  print(newRow);


            }
        } catch (Exception e) {
            e.printStackTrace();
            adfLogger.log(ADFLogger.ERROR, e.getMessage());
        }

    }


    /**
     *
     * remove all row
     *
     * **/

    private String removeMeasureLineRows() {
        CustomViewObjectImpl exVO = this.getBmCntrMeasureLineT1();
        exVO.setRangeSize(-1);
        Row[] allRow = exVO.getAllRowsInRange();
        for (Row currentRow : allRow) {
            currentRow.remove();
        }
        return null;
    }


    /**
     *
     * 查询总产值
     *
     * **/
    public Number countAllMeasureAmount(int cntrId) {

        String sql =
            "select stm.stm_bm_measure_pkg.get_all_measure_amount('" + cntrId +
            "') from dual";
        Number allAmount = excuteQuery(sql);
        ADFContext.getCurrent().getPageFlowScope().put("#{pageFlowScope.allMeasureAmount}",
                                                       allAmount);

        return allAmount;
    }


    /**
     * Container's getter for BmCntrMeasureQuery1.
     * @return BmCntrMeasureQuery1
     */
    public CustomViewObjectImpl getBmCntrMeasureQuery1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrMeasureQuery1");
    }

    /**
     * Container's getter for BmCntrVerifyHeaderT1.
     * @return BmCntrVerifyHeaderT1
     */
    public CustomViewObjectImpl getBmCntrVerifyHeaderT1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrVerifyHeaderT1");
    }

    /**
     * Container's getter for BmCntrVerifyLineT1.
     * @return BmCntrVerifyLineT1
     */
    public CustomViewObjectImpl getBmCntrVerifyLineT1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrVerifyLineT1");
    }

    /**
     * Container's getter for BmCntrVerifyHeaderToLinesLinks1.
     * @return BmCntrVerifyHeaderToLinesLinks1
     */
    public ViewLinkImpl getBmCntrVerifyHeaderToLinesLinks1() {
        return (ViewLinkImpl)findViewLink("BmCntrVerifyHeaderToLinesLinks1");
    }

    public boolean updateSelectedRowAccountFlag(List measureHeaderIds) {
        String headerId = "(";
        for (int i = 0; i < measureHeaderIds.size(); ++i) {
            headerId += "'" + measureHeaderIds.get(i) + "'";
            if (i != measureHeaderIds.size() - 1) {
                headerId += ",";
            }
        }
        headerId += ")";
        String sql = "update bm.bm_cntr_measure_header_t t\n" +
            " set t.account_flag='Y'\n" +
            " where t.cntr_measure_header_id in" + headerId;
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        try {
            stmt.execute();
            stmt.close();
            return true;
        } catch (SQLException ex) {
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
            return false;
        }


    }


    public boolean checkValidateMeasureHeader(int cntrMeasureHeaderId) {
        ViewObjectImpl measureHeaderVo = this.getBmCntrMeasureHeaderT1();
        measureHeaderVo.setRangeSize(-1);
        ViewCriteria vc = measureHeaderVo.createViewCriteria();
        ViewCriteriaRow vcr = vc.createViewCriteriaRow();
        vcr.setAttribute("CntrMeasureHeaderId",
                         new Number(cntrMeasureHeaderId));
        vc.add(vcr);
        measureHeaderVo.applyViewCriteria(vc);
        measureHeaderVo.executeQuery();

        Row[] allRow = measureHeaderVo.getAllRowsInRange();
        //重置VO查询条件
        measureHeaderVo.applyViewCriteria(measureHeaderVo.getViewCriteria("BmCntrMeasureHeaderForVerifyCriteria"));
        //        measureHeaderVo.executeQuery();
        for (Row currentRow : allRow) {
            if ("Y".equals(currentRow.getAttribute("AccountFlag"))) {
                return false;
            }
        }
        //     measureHeaderVo.closeRowSetIterator();

        return true;
    }


    /**
     * Container's getter for BmCntrConfirm1.
     * @return BmCntrConfirm1
     */
    public CustomViewObjectImpl getBmCntrConfirm1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrConfirm1");
    }

    /**
     * Container's getter for BmCntrFinConfirmT1.
     * @return BmCntrFinConfirmT1
     */
    public CustomViewObjectImpl getBmCntrFinConfirmT1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrFinConfirmT1");
    }

    /**
     *
     * 调用单号生成规则
     *        begin
 -- Call the function，传入参数：1.单据类型  2.合同ID
   :result := stm_bm_common_pkg.get_document_number(p_document_type => :p_document_type,
                                                   p_contract_id => :p_contract_id);
 end;
     *
     * **/
    public String generateDocumentNumber(String documentType, String cntrId) {
        String dn = this.generateBMDocumentNumber(documentType, cntrId);
        return dn;
    }


    /**
     * Container's getter for BmCntrMeasureListLov1.
     * @return BmCntrMeasureListLov1
     */
    public CustomViewObjectImpl getBmCntrMeasureListLov1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrMeasureListLov1");
    }


    public List<CntrMeasure> getExportData() {
        ViewObjectImpl vo = this.getBmCntrMeasureLineT1();
        List<CntrMeasure> list;
        list = new ArrayList<CntrMeasure>();
        vo.setRangeSize(-1);
        Row[] rows = vo.getAllRowsInRange();
        int count = 0;
        for (Row row : rows) {
            // new 一个javabean对象封装数据

            BmCntrMeasureLineTVORowImpl voRow =
                (BmCntrMeasureLineTVORowImpl)row;
            list = this.addChildMeasureRows(voRow, list, ++count);
            //opreations
        }
        return list;
    }

    private List<CntrMeasure> addChildMeasureRows(BmCntrMeasureLineTVORowImpl row,
                                                  List<CntrMeasure> list,
                                                  int count) {
        CntrMeasure headerAccount = new CntrMeasure();
        DBUtil dbUtil = new DBUtil();
        headerAccount.setLineNum(count);

        String listName = null;
        listName =
                dbUtil.quickGetFunctionResult(DBUtil.STM_DS, "stm.stm_bm_cntr_list_pkg.get_cntr_list_name(?)",
                                              new String[] { row.getAttribute("CntrListHeaderId").toString() });
        headerAccount.setListName(listName);
        headerAccount.setCntrListName((String)row.getAttribute("CntrListName"));
        headerAccount.setCntrListNumber((String)row.getAttribute("CntrListNumber"));
        String uniCode = null;
        uniCode =
                dbUtil.quickGetFunctionResult(DBUtil.STM_DS, "stm.stm_bm_cost_account_pkg.get_unit_of_measure(?)",
                                              new String[] { row.getAttribute("CntrListUomCode").toString() });
        headerAccount.setUomCode(uniCode);
        headerAccount.setBudgetQuantity(((Number)row.getAttribute("BudgetQuantity")).round(5).toString());
        headerAccount.setCumulativeQuantities(((Number)row.getAttribute("CumulativeQuantity")).round(5).toString());

        NumberFormat NF = NumberFormat.getPercentInstance();
        NF.setMaximumIntegerDigits(10);
        NF.setMaximumFractionDigits(3);
        Double CompletionPercentage = null;
        try {
            CompletionPercentage =
                    ((Number)row.getAttribute("CompletionPercentage")).round(4).doubleValue();
        } catch (Exception se) {
            se.printStackTrace();
        }
        CompletionPercentage = CompletionPercentage / 100;
        headerAccount.setCompletionPercentage(NF.format(CompletionPercentage));
        headerAccount.setEngineeringQuantities(((Number)row.getAttribute("EngineeringQuantity")).round(5).toString());
        headerAccount.setUnitPrice(row.getAttribute("UnitPrice").toString());
        headerAccount.setMeasureAmount(((Number)row.getAttribute("MeasureAmount")).round(2).toString());
        if (null == row.getAttribute("TaskId") ||
            "".equals(row.getAttribute("TaskId"))) {
            headerAccount.setFbs("");
        } else {
            String TaskName =
                dbUtil.quickGetFunctionResult(DBUtil.STM_DS, "stm.stm_bm_subcntr_measure_pkg.get_task_name(?)",
                                              new String[] { row.getAttribute("TaskId").toString() });
            headerAccount.setFbs(TaskName);
        }
        list.add(headerAccount);

        return list;
    }

    /**
     * Container's getter for BmCntrMeasureLineT1.
     * @return BmCntrMeasureLineT1
     */
    public CustomViewObjectImpl getBmCntrMeasureLineT1() {
        return (CustomViewObjectImpl)findViewObject("BmCntrMeasureLineT1");
    }

    /**
     * Container's getter for CntrMeasureHeaderToLinesLinks1.
     * @return CntrMeasureHeaderToLinesLinks1
     */
    public ViewLinkImpl getCntrMeasureHeaderToLinesLinks1() {
        return (ViewLinkImpl)findViewLink("CntrMeasureHeaderToLinesLinks1");
    }


    /***
     * 通过headerId查询
     *
     * **/
     public String queryBmCntrMeasureByHeaderId(Number headerId) {
           ViewObjectImpl vo = this.getBmCntrMeasureHeaderT1();
           Row [] rows = vo.findByKey(new Key(new Object[] { headerId }), 1);
           if(rows.length == 0){
               return "goNoFoundPage";
           }
           vo.setCurrentRow(rows[0]);
           ADFContext.getCurrent().getPageFlowScope().put("disableAction",
                                                          "true");
           return "queryBmCntrMeasureByHeaderId";
       }
  /*  public void queryBmCntrMeasureByHeaderId(Number headerId) {
        ViewObjectImpl vo = this.getBmCntrMeasureHeaderT1();
        Row row = vo.findByKey(new Key(new Object[] { headerId }), 1)[0];
        vo.setCurrentRow(row);
        ADFContext.getCurrent().getPageFlowScope().put("disableAction",
                                                       "true");
    }*/


    public String isValidateTransferDate(oracle.jbo.domain.Date transferDate,
                                         int orgId) {
        String sql =
            " select    stm.stm_bm_cntr_transfer_pkg.is_validate_transfer_date(" +
            "TO_DATE('" + transferDate.dateValue() + "','yyyy/MM/dd')," + "'" +
            orgId + "')  from dual  ";
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        ResultSet rs = null;
        try {
            stmt.execute();
            rs = stmt.getResultSet();
            if (rs.next()) {
                String returnMsg = "";
                if (null != rs.getObject(1)) {
                    returnMsg =
                            rs.getObject(1).toString() == null ? "" : rs.getObject(1).toString();
                }
                return returnMsg;
            } else {
                return "";
            }
        } catch (SQLException ex) {
            //    ex.printStackTrace();
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
            this.getDBTransaction().rollback();
            return "";
        } finally {
            if (stmt != null) {
                try {
                    rs.close();
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    public Number countTrasnferingRecord(int cntrId) {
        String sql = "select count(*)\n" +
            "  from bm.bm_cntr_fin_confirm_t FC\n" +
            " where FC.cntr_verify_header_id in\n" +
            "       (select VH.CNTR_VERIFY_HEADER_ID\n" +
            "          FROM BM.BM_CNTR_VERIFY_HEADER_T VH\n" +
            "         WHERE VH.CNTR_ID = '" + cntrId + "')\n" +
            "   AND FC.TRANSFER_STATUS = 'TRANSFERING'\n";
        return excuteQuery(sql);

    }

    public Number getCumulativeProductionAmount(int cntrId) {
        String sql =
            "select SUM(T.PRODUCTION_TOTAL)  from bm.Bm_Cntr_Measure_Header_t T\n" +
            "WHERE T.STATUS = 'APPROVED'\n" +
            "AND T.CNTR_ID = '" + cntrId + "'";
        return excuteQuery(sql);
    }


    public Number getCumulativeActualOutput(int cntrId) {
        String sql =
            "select SUM(T.OWER_CONFIRM_QUANTITY)  from bm.Bm_Cntr_Verify_Header_t T" +
            " WHERE T.STATUS = 'CONFIRMED'\n" +
            "        AND T.CNTR_ID = '" + cntrId + "'";
        return excuteQuery(sql);
    }


    /**
     *导出vo方法
     * @return
     */

    public List<CntrCheck> getExportCheckData() {
        ViewObjectImpl vo = this.getBmCntrVerifyHeaderT1();
        List<CntrCheck> list;
        list = new ArrayList<CntrCheck>();
        vo.setRangeSize(-1);
        Row[] rows = vo.getAllRowsInRange();
        int lineNum = 1;
        for (Row row : rows) {
            // new 一个javabean对象封装数据
            BmCntrVerifyHeaderTVORowImpl voRow =
                (BmCntrVerifyHeaderTVORowImpl)row;
            list = this.addChildCheckRows(voRow, list, lineNum);
            //opreations
            lineNum++;
        }
        return list;
    }

    private List<CntrCheck> addChildCheckRows(BmCntrVerifyHeaderTVORowImpl row,
                                              List<CntrCheck> list,
                                              int lineNum) {
        NumberFormat NF = NumberFormat.getPercentInstance();
        NF.setMaximumIntegerDigits(2);
        NF.setMaximumFractionDigits(2);
        CntrCheck headerAccount = new CntrCheck();
        headerAccount.setLineNum(lineNum);
        headerAccount.setDocumentNumber(row.getAttribute("DocumentNumber").toString());

        headerAccount.setVerifyStartDate(row.getAttribute("VerifyStartDate").toString());
        headerAccount.setVerifyEndtDate(row.getAttribute("VerifyEndDate").toString());
        headerAccount.setActualOutput(((Number)row.getAttribute("ActualOutput")).round(2).toString());
        headerAccount.setCumulativeActualOutput(((Number)row.getAttribute("CumulativeActualOutput")).round(2).toString());
        headerAccount.setProSubcntrOutput(((Number)row.getAttribute("ProSubcntrOutput")).round(2).toString());

        headerAccount.setOwerComfirmQuantity(((Number)row.getAttribute("OwerConfirmQuantity")).round(2).toString());
        headerAccount.setOtherSubcntrOutput(((Number)row.getAttribute("OtherSubcntrOutput")).round(2).toString());
        headerAccount.setCntrVisaComformQuantity(((Number)row.getAttribute("CntrVisaConfirmQuantity")).round(2).toString());
        headerAccount.setCntrComformDate(row.getAttribute("CntrConfirmDate").toString());
        headerAccount.setCntrPaymentAmount(((Number)row.getAttribute("CntrPaymentAmount")).round(2).toString());
        headerAccount.setLaborAmount(((Number)row.getAttribute("LaborAmount")).round(2).toString());
        headerAccount.setSecurityAmount(((Number)row.getAttribute("SecurityAmount")).round(2).toString());
        headerAccount.setCntrPaymentDate(row.getAttribute("CntrPaymentDate").toString());

        headerAccount.setAlreadyComfirmAmount(((Number)row.getAttribute("AlreadyConfirmAmount")).round(2).toString());
        headerAccount.setUnConfirmAmount(((Number)row.getAttribute("LeftConfirmAmount")).round(2).toString());
        DBUtil dbUtil = new DBUtil();

        if (null == row.getAttribute("Status") ||
            "".equals(row.getAttribute("Status"))) {
            headerAccount.setStatus("");
        } else {
            String StatusName =
                dbUtil.quickGetFunctionResult(DBUtil.STM_DS, "stm.stm_bm_common_pkg.get_lookup_meaning(?,?)",
                                              new String[] { row.getAttribute("Status").toString(),
                                                             "BM_CNTR_VERIFY_STATUS" });
            headerAccount.setStatus(StatusName);
        }
        list.add(headerAccount);

        return list;
    }

    private Number excuteQuery(String sql) {
        PreparedStatement stmt =
            this.getDBTransaction().createPreparedStatement(sql, 0);
        ResultSet rs = null;
        try {
            stmt.execute();
            rs = stmt.getResultSet();
            if (rs.next()) {
                Number allAmount = new Number(0);
                if (null != rs.getObject(1)) {
                    allAmount =
                            new Number(rs.getObject(1).toString()) == null ?
                            new Number(0) :
                            new Number(rs.getObject(1).toString());
                }
                return allAmount;
            } else {
                return new Number(0);
            }
        } catch (SQLException ex) {
            //    ex.printStackTrace();
            adfLogger.log(ADFLogger.ERROR, ex.getMessage());
            this.getDBTransaction().rollback();
            return new Number(0);
        } finally {
            if (stmt != null) {
                try {
                    rs.close();
                    stmt.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


}
